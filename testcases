#whitespace
1  . <- 1

# print
1 . <- 1
1 2 3 4 . . . <- 4 3 2
65 emit <- A

# comments
1 ( comment 2 . ) . <- 1
( ) 9 . <- 9

# basics
1 2 dup . . . <- 2 2 1
1 2 drop . <- 1
1 2 swap . . <- 1 2
1 2 over . . . <- 1 2 1
3 4 5 rot . . . <- 3 5 4
8 9 2dup . . . . <- 9 8 9 8

# arithmetics
1 2 + . <- 3
1 2 - . <- -1
3 4 * . <- 12
10 5 / . <- 2
10 4 / . <- 2

# constants
42 constant answer answer . <- 42
# constant redefinition
42 constant answer 43 constant answer answer . <- 43

#comparisons and binary operators

3 4 < . <- -1
3 4 > . <- 0
3 4 < invert . <- 0
4 4 = . <- -1
3 4 < 20 30 > or . <- -1
3 4 < 20 30 < and . <- -1
-1 0 and . <- 0
-1 -1 and . <- -1
-1 -1 or . <- -1
0 0 or . <- 0
0 -1 or . <- -1
0 0 xor . <- 0
-1 -1 xor . <- 0
0 -1 xor . <- -1
0 invert . <- -1
-1 invert . <- 0

#mod
3 3 mod . <- 0
4 3 mod . <- 1
5 3 mod . <- 2
10 5 mod 0 = . <- -1

# return stack
1 2 >r >r r> r> . . <- 2 1

# load and store
42 0 ! 0 @ . <- 42
42 0 ! 0 ? <- 42

# variables load and store
variable aaa 99 aaa ! aaa @ . <- 99
variable eggs 1 eggs ! 2 eggs +! eggs @ . <- 3

# execution token basic
99 ' . execute <- 99
1 2 3 ' dup execute . . <- 3 3

#function definition
1 : two 2 ; two . <- 2
1 : dup2 dup ; 2 dup2 . . <- 2 2
: three 3 3 3 ; three . . . <- 3 3 3

#execution tokens to user-defined functions
: ninetynine 99 ; ' ninetynine execute . <- 99

#function redefinition

1 : drop dup ; drop . . <- 1 1
#; words: should override 1 with 2
: 1 2 ;  1 . <- 2 
# even over numbers
: 1 2 ; : 2 1 ; 1 2 . . <- 2 2
: n 1 ; n . <- 1
: n 1 ; : n 2 ; n . <- 2
: n 1 ; : n n 2 ; n . . <- 2 1
: n 1 ; : n n 2 ; : n n 3 ; n . . . <- 3 2 1
: hello ." hello world" ; : doublehello hello hello ; : hello ." new hello" ; doublehello <- hello worldhello world

#unnamed execution tokens
:noname 1 ; execute . <- 1

# see

: 3dup dup dup dup ; see 3dup <- dup dup dup