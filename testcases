#whitespace
1  . <- 1

# print
1 . <- 1
1 2 3 4 . . . <- 4 3 2
65 emit <- A

# print words
." hello" <- hello

# comments
1 ( comment 2 . ) . <- 1
( ) 9 . <- 9

# basics
1 2 dup . . . <- 2 2 1
1 2 drop . <- 1
1 2 swap . . <- 1 2
1 2 over . . . <- 1 2 1
3 4 5 rot . . . <- 3 5 4
8 9 2dup . . . . <- 9 8 9 8
1 2 3 nip . . <- 3 1

# arithmetics
1 2 + . <- 3
1 2 - . <- -1
3 4 * . <- 12
10 5 / . <- 2
10 4 / . <- 2

# constants
42 constant answer answer . <- 42
# constant redefinition
42 constant answer 43 constant answer answer . <- 43

#comparisons and binary operators

3 4 < . <- -1
3 4 > . <- 0
3 4 < invert . <- 0
4 4 = . <- -1
3 4 < 20 30 > or . <- -1
3 4 < 20 30 < and . <- -1
-1 0 and . <- 0
-1 -1 and . <- -1
-1 -1 or . <- -1
0 0 or . <- 0
0 -1 or . <- -1
0 0 xor . <- 0
-1 -1 xor . <- 0
0 -1 xor . <- -1
0 invert . <- -1
-1 invert . <- 0
4 3 >= . <- -1
4 4 >= . <- -1
3 4 >= . <- 0
4 3 <= . <- 0
4 4 <= . <- -1
3 4 <= . <- -1

#mod
3 3 mod . <- 0
4 3 mod . <- 1
5 3 mod . <- 2
10 5 mod 0 = . <- -1

# return stack
1 2 >r >r r> r> . . <- 2 1

# load and store
42 0 ! 0 @ . <- 42
42 0 ! 0 ? <- 42

# variables load and store
variable aaa 99 aaa ! aaa @ . <- 99
variable eggs 1 eggs ! 2 eggs +! eggs @ . <- 3

# execution token basic
99 ' . execute <- 99
1 2 3 ' dup execute . . <- 3 3

#function definition
1 : two 2 ; two . <- 2
1 : dup2 dup ; 2 dup2 . . <- 2 2
: three 3 3 3 ; three . . . <- 3 3 3
2 : dup-with-comment ( n -- n n ) dup ; dup-with-comment . . <- 2 2

#print words in a function
: hi ." hello" ; hi <- hello

# multiple words in function
: >= 2dup > rot rot = or ; 4 3 >= . <- -1

#execution tokens to user-defined functions
: ninetynine 99 ; ' ninetynine execute . <- 99

#function redefinition

1 : drop dup ; drop . . <- 1 1
#; words: should override 1 with 2
: 1 2 ;  1 . <- 2 
# even over numbers
: 1 2 ; : 2 1 ; 1 2 . . <- 2 2
: n 1 ; n . <- 1
: n 1 ; : n 2 ; n . <- 2
: n 1 ; : n n 2 ; n . . <- 2 1
: n 1 ; : n n 2 ; : n n 3 ; n . . . <- 3 2 1
: hello ." hello world" ; : doublehello hello hello ; : hello ." new hello" ; doublehello <- hello worldhello world

#unnamed execution tokens
:noname 1 ; execute . <- 1

# begin .. until loop
: once begin 3 . true until ; once <- 3
: twice 2 begin 1 - dup . dup 0= until ; twice <- 1 0
: banana ." ba" 2 begin ." na" 1- dup 0= until ; banana <- banana
: aaa 3 begin ." a" 1- dup 0= until ; aaa <- aaa
0 : until-10 begin 1+ dup . dup 9 > until ; until-10 <- 1 2 3 4 5 6 7 8 9 10

# do .. loop    
: spell ." ba" 4 0 do ." na" loop ; spell <- banananana
3 0 : f do i . loop ; f <- 0 1 2
: g 3 0 do i . loop ; g <- 0 1 2
: h 2 -1 do i . loop ; h <- -1 0 1
: print-twice 2 0 do dup . loop ; 42 print-twice <- 42 42
# eating the stack within the loop
1 2 3 : f 3 0 do . loop ; f <- 3 2 1
# nested loop
: print-nested 4 0 do i 2 0 do  i j . . loop loop ; print-nested <- 0 0 0 1 1 0 1 1 2 0 2 1 3 0 3 1

# if then
: is-true ( flag -- ) if ." true " then ; true is-true <- true
: is-true ( flag -- ) if ." true " then ; false is-true <- 
: is-true-dot if ." true" then ." ." ; false is-true-dot <- . 
: is-zero? 0 = if ." yes " then ." ... " ; 0 is-zero? <- yes ...
: is-zero? 0 = if ." yes " then ." ... " ; 1 is-zero? <- ...
: is-zero? 0 = if ." yes " then ; 1 is-zero? <- 
# if else then
: print-bool if ." true " else ." false " then ; true false print-bool print-bool <- false true
: print-bool-dot if ." true" else ." false" then ." ." ; true false print-bool-dot print-bool-dot <- false.true.
: is-it-zero?  0 = if ." Yes!" else ." No!" then ; 0 is-it-zero? <- Yes!
: is-it-zero?  0 = if ." Yes!" else ." No!" then ; 1 is-it-zero? <- No!

# min max
3 4 min . <- 3
3 4 max . <- 4

# if within a function
: is-false invert if ." false" then ; : is-true if ." true" then ; : which-boolean dup is-true is-false ; false which-boolean <- false

# do within a function
: print-123 4 1 do i . loop ; : print-123123 print-123 print-123 ; print-123123 <- 1 2 3 1 2 3 

# loop within a loop
: print-twice dup . dup . ; : print-numbers 5 0 do i print-twice loop ; print-numbers <- 0 0 1 1 2 2 3 3 4 4
: print-twice 2 0 do dup . loop ; : print-numbers 5 0 do i print-twice loop ; print-numbers <- 0 0 1 1 2 2 3 3 4 4

# loop within an if
: print-if-high 100 > if ." such a b" 3 0 do ." i" loop ." g number" then ;

# fizz buzz
: fizz dup 3 mod 0= if ." fizz " else . then ; : do-fizz 10 1 do i fizz loop ; do-fizz <- 1 2 fizz 4 5 fizz 7 8 fizz